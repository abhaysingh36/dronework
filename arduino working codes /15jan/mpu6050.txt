MPU6050 Features
MEMS 3-aixs accelerometer and 3-axis gyroscope values combined
Power Supply: 3-5V

Communication : I2C protocol

Built-in 16-bit ADC provides high accuracy
Built-in DMP provides high computational power
Can be used to interface with other IIC devices like magnetometer
Configurable IIC Address
In-built Temperature sensor
More features and technical specifications be found in the MPU6050 datasheet attached at the bottom of the article.


Alternative for MPU6050
ADXL335 (3-axis accelerometer), ADXL345 (3-axis accelerometer), MPU9250 (9-axis IMU)

## suggestion for the code 
PID Tuning: You have set the Kp, Ki, and Kd constants for the PID controller, but you're only using Kp and Kd in the stabilization. If you're planning to fine-tune the drone's flight stability, consider incorporating the Ki (integral) term, especially if you notice persistent drift over time. Additionally, you may want to log or dynamically adjust these constants based on conditions for better stability during flight.

Safety:

Emergency Stop: Consider adding a safety feature like an emergency stop. You could trigger this feature by listening for a specific serial command (e.g., stop) or a hardware button. This will help avoid damage if the drone goes out of control.
Minimum Throttle Safety: Ensure the minimum throttle value prevents the motors from cutting out under certain conditions. You could implement a check where the system prevents the throttle from going below a safe value.
ESC Calibration Delay: When calibrating the ESCs, youâ€™re using fixed 2000 ms delay. In practice, ESCs might need different times for calibration, and they might not need a long delay. It could be more effective to try reducing the delay slightly or making it adjustable via serial commands.

Sensor Data Filtering: MPU6050 sensors might suffer from noise, which could cause rapid, small movements in the drone. You might want to apply a low-pass filter or a moving average filter to the sensor readings to smooth the roll and pitch values.

Communication Protocol:

Consider using a more structured protocol for communication between the Raspberry Pi and Arduino. For example, you could use a command format like COMMAND:VALUE1,VALUE2,... to standardize the interaction and make parsing easier.
Commenting and Documentation: Although the code is easy to follow, consider adding more comments, especially for sections where you calculate corrections, as this can be useful if you revisit this code after a long time. Describing how the PID controllers work, the logic behind the throttle adjustments, and the calibration process can help maintain and improve the code later.

State Feedback: You could add a system to provide feedback about the state of the drone in real-time (e.g., Roll: <value>, Pitch: <value>, Yaw: <value>). This could be helpful when debugging or monitoring the system's behavior while testing.

Optimizing readMPU6050Data():

You may want to check whether mpu.getMotion6 is successful by adding a validation step for the sensor data to ensure it hasn't been corrupted or returned incorrectly, especially in more challenging environments.
Code Performance: For an embedded system like an Arduino, performance is critical. Although the current code appears efficient, constantly calling delay(2000) during ESC calibration may impact overall performance if other tasks (like sensor updates or control) need to run in parallel. Consider using non-blocking methods, like using millis() to manage timing without halting the program.



##  suggestion2 

1. PID Control Tuning
Your current code uses proportional (P) and derivative (D) terms but lacks an integral (I) component, which can help eliminate drift over time. You can implement the full PID control algorithm to improve stability:

Proportional (P): Corrects based on the current error (as you already have).
Integral (I): Corrects based on the cumulative sum of errors, which helps to eliminate small steady-state errors.
Derivative (D): Corrects based on the rate of change of error, which helps to counteract oscillations.
Example of full PID control for stabilization:

float rollIntegral = 0.0, pitchIntegral = 0.0;
const float Ki = 0.1;  // Small value for integral term

void stabilizeDrone() {
  rollError = roll;  // Assuming target roll and pitch are 0 for stabilization
  pitchError = pitch;

  // Integral term (sum of errors over time)
  rollIntegral += rollError;
  pitchIntegral += pitchError;

  // PID control formula
  rollCorrection = Kp * rollError + Ki * rollIntegral + Kd * (rollError - lastRollError);
  pitchCorrection = Kp * pitchError + Ki * pitchIntegral + Kd * (pitchError - lastPitchError);

  lastRollError = rollError;
  lastPitchError = pitchError;

  int throttleBase = 1500;  // Mid-range throttle
  setThrottleValues(
    throttleBase + rollCorrection - pitchCorrection,
    throttleBase - rollCorrection - pitchCorrection,
    throttleBase + rollCorrection + pitchCorrection,
    throttleBase - rollCorrection + pitchCorrection
  );
}


2. Filtering Noise from MPU6050
Accelerometer and gyroscope data from the MPU6050 may contain noise, which can affect the stability. You could apply a low-pass filter to smooth out the data.

Example of a simple moving average filter:

const int filterWindow = 10;  // The number of samples to average
float rollHistory[filterWindow], pitchHistory[filterWindow];
int rollIndex = 0, pitchIndex = 0;

void readMPU6050Data() {
  int16_t ax, ay, az, gx, gy, gz;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  roll = atan2(ay, az) * 180 / PI;
  pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 180 / PI;

  // Apply moving average filter for roll and pitch
  rollHistory[rollIndex] = roll;
  pitchHistory[pitchIndex] = pitch;
  rollIndex = (rollIndex + 1) % filterWindow;
  pitchIndex = (pitchIndex + 1) % filterWindow;

  roll = average(rollHistory, filterWindow);
  pitch = average(pitchHistory, filterWindow);
}

float average(float* array, int size) {
  float sum = 0;
  for (int i = 0; i < size; ++i) {
    sum += array[i];
  }
  return sum / size;
}
This will smooth out rapid changes and reduce oscillations caused by sensor noise.



To further stabilize your drone, you could enhance your code in several ways:

1. PID Control Tuning
Your current code uses proportional (P) and derivative (D) terms but lacks an integral (I) component, which can help eliminate drift over time. You can implement the full PID control algorithm to improve stability:

Proportional (P): Corrects based on the current error (as you already have).
Integral (I): Corrects based on the cumulative sum of errors, which helps to eliminate small steady-state errors.
Derivative (D): Corrects based on the rate of change of error, which helps to counteract oscillations.
Example of full PID control for stabilization:

cpp
Copy code
float rollIntegral = 0.0, pitchIntegral = 0.0;
const float Ki = 0.1;  // Small value for integral term

void stabilizeDrone() {
  rollError = roll;  // Assuming target roll and pitch are 0 for stabilization
  pitchError = pitch;

  // Integral term (sum of errors over time)
  rollIntegral += rollError;
  pitchIntegral += pitchError;

  // PID control formula
  rollCorrection = Kp * rollError + Ki * rollIntegral + Kd * (rollError - lastRollError);
  pitchCorrection = Kp * pitchError + Ki * pitchIntegral + Kd * (pitchError - lastPitchError);

  lastRollError = rollError;
  lastPitchError = pitchError;

  int throttleBase = 1500;  // Mid-range throttle
  setThrottleValues(
    throttleBase + rollCorrection - pitchCorrection,
    throttleBase - rollCorrection - pitchCorrection,
    throttleBase + rollCorrection + pitchCorrection,
    throttleBase - rollCorrection + pitchCorrection
  );
}
Adjust the Ki constant to suit the drone's behavior. It may need fine-tuning through trial and error.

2. Filtering Noise from MPU6050
Accelerometer and gyroscope data from the MPU6050 may contain noise, which can affect the stability. You could apply a low-pass filter to smooth out the data.

Example of a simple moving average filter:

cpp
Copy code
const int filterWindow = 10;  // The number of samples to average
float rollHistory[filterWindow], pitchHistory[filterWindow];
int rollIndex = 0, pitchIndex = 0;

void readMPU6050Data() {
  int16_t ax, ay, az, gx, gy, gz;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  roll = atan2(ay, az) * 180 / PI;
  pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 180 / PI;

  // Apply moving average filter for roll and pitch
  rollHistory[rollIndex] = roll;
  pitchHistory[pitchIndex] = pitch;
  rollIndex = (rollIndex + 1) % filterWindow;
  pitchIndex = (pitchIndex + 1) % filterWindow;

  roll = average(rollHistory, filterWindow);
  pitch = average(pitchHistory, filterWindow);
}

float average(float* array, int size) {
  float sum = 0;
  for (int i = 0; i < size; ++i) {
    sum += array[i];
  }
  return sum / size;
}
This will smooth out rapid changes and reduce oscillations caused by sensor noise.

3. Throttle Control for Smooth Response
Gradually increasing/decreasing throttle based on the correction values can prevent the drone from making sudden jerks. You can implement a throttle ramping mechanism, where you smoothly adjust the throttle instead of setting it directly to the corrected value.

Example:

cpp
Copy code
int lastThrottle[4] = {1500, 1500, 1500, 1500};  // Store last throttle values

void setThrottleValues(int m1, int m2, int m3, int m4) {
  esc1.writeMicroseconds(smoothThrottle(lastThrottle[0], m1));
  esc2.writeMicroseconds(smoothThrottle(lastThrottle[1], m2));
  esc3.writeMicroseconds(smoothThrottle(lastThrottle[2], m3));
  esc4.writeMicroseconds(smoothThrottle(lastThrottle[3], m4));

  lastThrottle[0] = m1;
  lastThrottle[1] = m2;
  lastThrottle[2] = m3;
  lastThrottle[3] = m4;
}

int smoothThrottle(int currentThrottle, int targetThrottle) {
  int step = (targetThrottle - currentThrottle) / 10;  // Adjust smoothness here
  return currentThrottle + step;
}
This will reduce sharp changes in throttle and result in smoother movements.



##   suggestion 3
Suggested Improvements for Stability:
Prevent Accumulation of Integral Terms: The integral term in the PID controller can cause wind-up over time, which leads to instability. You can clamp the integral term to a maximum value to prevent wind-up.

cpp
Copy code
const float maxIntegral = 500.0;  // Maximum allowed integral term

rollIntegral = constrain(rollIntegral, -maxIntegral, maxIntegral);
pitchIntegral = constrain(pitchIntegral, -maxIntegral, maxIntegral);
Include a Low-Pass Filter for the Gyroscope: Gyroscope noise can make the drone unstable, especially at low speeds. Adding a simple low-pass filter can help smooth the data.

cpp
Copy code
const float alpha = 0.98;  // Filter coefficient (adjust for smoother result)

float filteredRoll = alpha * (rollHistory[rollIndex - 1] + roll) + (1 - alpha) * roll;
roll = filteredRoll;

float filteredPitch = alpha * (pitchHistory[pitchIndex - 1] + pitch) + (1 - alpha) * pitch;
pitch = filteredPitch;
Improving Throttle Smoothing: Throttle transitions can be smoother by modifying the smoothThrottle() function for more gradual steps.

cpp
Copy code
int smoothThrottle(int currentThrottle, int targetThrottle) {
    int step = (targetThrottle - currentThrottle) / 5;  // Smoother transition
    return currentThrottle + step;
}
Limit Maximum Roll and Pitch Angles: To prevent excessive correction and instability, you could limit the maximum roll and pitch angles that the drone can attempt to correct.

cpp
Copy code
const float maxRollAngle = 30.0;  // Degrees
const float maxPitchAngle = 30.0;  // Degrees

roll = constrain(roll, -maxRollAngle, maxRollAngle);
pitch = constrain(pitch, -maxPitchAngle, maxPitchAngle);



##  suggestion 4 
 Filter Window Size:
The filterWindow is set to 10, which is decent for noise reduction but may need tuning based on actual sensor data. You could expose this parameter as a command input (like setfilterwindow <size>) for easy tuning during testing.
2. PID Tuning via Serial Input:
The PID constants (Kp, Ki, Kd) are hardcoded, and adjusting them requires modifying the code. You could add a serial command (setpid Kp Ki Kd) to allow dynamic tuning of these constants. This would be useful in-flight when fine-tuning stabilization.
3. Throttle Smoothing:
The smoothThrottle function uses a fixed step size, which could result in abrupt changes. Instead of dividing by 10, you could implement a more sophisticated smoothing algorithm, like an exponential smoothing or a ramp-up method that gradually changes the throttle values more naturally over time.
4. Serial Command Error Handling:
Your serial command handling could be improved by adding checks for invalid or incomplete commands. For example, if setpid is called with fewer than 3 parameters, it could notify the user of the issue and not attempt to apply faulty values.
5. Handling Interrupts for MPU6050 Data:
If you're aiming for real-time performance, you may want to consider using interrupts to read MPU6050 data. This would allow you to decouple the data reading from the loop() function, improving the responsiveness of the control system.
6. Better ESC Safety Handling:
In the current implementation, thereâ€™s no explicit safety handling for ESCs (e.g., failing to initialize them). Consider implementing checks to ensure ESCs are initialized properly, and maybe add an emergency shutdown feature in case something goes wrong (e.g., throttle becomes too high unexpectedly).
7. Improve Readability and Comments:
While your code is already quite readable, you could enhance the clarity of the stabilizeDrone() and readMPU6050Data() functions by breaking them into smaller, well-defined helper functions. For example:
readMPU6050Data() could be split into functions for reading raw sensor data and converting it into angles.
stabilizeDrone() could be broken down into smaller steps, like calculatePID() and applyCorrections().
8. Battery Voltage Monitoring (Optional):
Itâ€™s often useful to monitor the drone's battery voltage in real-time to adjust throttle or raise warnings if voltage drops too low. This can be integrated using an analog input pin connected to a voltage divider or a dedicated battery monitor.
9. Serial Communication Reliability:
You're using SoftwareSerial for communication with the Raspberry Pi. Keep in mind that SoftwareSerial can be unreliable at higher baud rates, especially with fast baud rates like 9600. You may want to experiment with HardwareSerial if available on your board for more reliable communication.
10. Time-Dependent Calibration Delay:
The escDelay is a fixed value for ESC calibration. A suggestion here would be to check the status of the calibration process and dynamically adjust the delay to ensure calibration is completed successfully. You could introduce a timeout or a more robust delay check to improve reliability.

void handleSerialCommand(String command) {
  if (command == "calibrate") {
    ESCCalibration escCalibration;
    Serial.println("Starting ESC calibration. Please keep a safe distance.");
    piSerial.println("Starting ESC calibration. Please keep a safe distance.");
    escCalibration.calibrateESCs();
    Serial.println("ESC calibration complete.");
    piSerial.println("ESC calibration complete.");
    Serial.println("You may now enter throttle values.");
    piSerial.println("You may now enter throttle values.");
  } else if (command.startsWith("setdelay")) {
    int newDelay = command.substring(8).toInt();
    if (newDelay > 0) {
      escDelay = newDelay;
      Serial.print("ESC calibration delay set to: ");
      Serial.println(escDelay);
      piSerial.print("ESC calibration delay set to: ");
      piSerial.println(escDelay);
    } else {
      Serial.println("Invalid delay value. Enter a positive integer.");
      piSerial.println("Invalid delay value. Enter a positive integer.");
    }
  } else if (command.startsWith("setpid")) {
    float newKp = command.substring(7, command.indexOf(' ', 7)).toFloat();
    float newKi = command.substring(command.indexOf(' ', 7) + 1, command.lastIndexOf(' ')).toFloat();
    float newKd = command.substring(command.lastIndexOf(' ') + 1).toFloat();
    
    if (newKp > 0 && newKi >= 0 && newKd >= 0) {
      Kp = newKp;
      Ki = newKi;
      Kd = newKd;
      Serial.print("PID values updated to: ");
      Serial.print("Kp: "); Serial.print(Kp);
      Serial.print(", Ki: "); Serial.print(Ki);
      Serial.print(", Kd: "); Serial.println(Kd);
      piSerial.print("PID values updated to: ");
      piSerial.print("Kp: "); piSerial.print(Kp);
      piSerial.print(", Ki: "); piSerial.print(Ki);
      piSerial.print(", Kd: "); piSerial.println(Kd);
    } else {
      Serial.println("Invalid PID values. Enter positive values.");
      piSerial.println("Invalid PID values. Enter positive values.");
    }
  } else {
    processThrottleInput(command);
  }
}



######  suggestion5 


uggestion:

Implement clamping of the integral term to prevent windup:
cpp
Copy code
const float maxIntegral = 200.0;  // Set a limit for the integral term
rollIntegral = constrain(rollIntegral, -maxIntegral, maxIntegral);
pitchIntegral = constrain(pitchIntegral, -maxIntegral, maxIntegral);
2. Optimize the Moving Average Filter:
You're using a moving average filter with a fixed window size, which is fine, but dynamically adjusting this window based on conditions (e.g., higher noise) could improve performance. Additionally, a low-pass filter or exponential smoothing might provide better results for noise reduction.
Suggestion:

You can add a simple low-pass filter for better noise reduction:
cpp
Copy code
float alpha = 0.1;  // Smoothing factor
roll = alpha * roll + (1 - alpha) * rollHistory[rollIndex];
pitch = alpha * pitch + (1 - alpha) * pitchHistory[pitchIndex];
3. Refining the ESC Calibration:
While the ESC calibration works fine, you may want to add more safety checks. For instance, ensure that the user can only calibrate the ESCs once they have confirmed they're at a safe distance from the drone.
Suggestion:

You can ask the user for confirmation before calibration:
cpp
Copy code
void handleSerialCommand(String command) {
  if (command == "calibrate") {
    Serial.println("Are you at a safe distance from the drone? Type 'yes' to proceed.");
    piSerial.println("Are you at a safe distance from the drone? Type 'yes' to proceed.");
    String confirmation = Serial.readStringUntil('\n');
    if (confirmation == "yes") {
      ESCCalibration escCalibration;
      escCalibration.calibrateESCs();
      Serial.println("ESC calibration complete.");
      piSerial.println("ESC calibration complete.");
    } else {
      Serial.println("Calibration aborted.");
      piSerial.println("Calibration aborted.");
    }
  }
  // Continue with the rest of your commands...
}
4. Dynamic Tuning of PID Constants:
Youâ€™re allowing the user to set the PID constants (Kp, Ki, Kd) via serial commands, which is great for tuning. You could also print the current values of the PID constants periodically to give feedback to the user.
Suggestion:

Add periodic feedback of PID constants:
cpp
Copy code
void loop() {
  // Other code...
  Serial.print("Current PID values: Kp: "); Serial.print(Kp);
  Serial.print(", Ki: "); Serial.print(Ki);
  Serial.print(", Kd: "); Serial.println(Kd);
  delay(1000);  // Display every 1 second (or adjust as needed)
}
5. Improve the parseThrottleInput Function:
The throttle input parsing currently works, but the code could be improved by providing better error handling and feedback. For instance, you can handle incorrect or incomplete inputs more gracefully.
Suggestion:

Add more robust input validation:
cpp
Copy code
bool parseThrottleInput(String input, int throttleValues[4]) {
  int index = 0;
  int lastIndex = 0;
  int commaIndex;
  for (int i = 0; i < 4; ++i) {
    commaIndex = input.indexOf(',', lastIndex);
    if (commaIndex == -1 && i < 3) return false;  // Return false if not enough values
    if (i == 3) commaIndex = input.length();

    String value = input.substring(lastIndex, commaIndex);
    int throttle = value.toInt();
    if (throttle >= minThrottle && throttle <= maxThrottle) {
      throttleValues[i] = throttle;
    } else {
      return false;
    }
    lastIndex = commaIndex + 1;
  }
  return true;
}
6. General Code Cleanup:
You can refactor certain parts of the code for better readability. For instance, the logic for ESC pin assignments and servo.attach() could be simplified using a loop.
Suggestion:

Simplify ESC pin attachment:
cpp
Copy code
void setup() {
  // Setup code...
  for (int i = 0; i < 4; i++) {
    Servo* esc = (i == 0) ? &esc1 : (i == 1) ? &esc2 : (i == 2) ? &esc3 : &esc4;
    esc->attach(escPins[i]);
  }
}
7. Add Logging for Debugging:
Consider adding some logging for debugging purposes, especially when dealing with hardware like MPU6050 or motors. This can help troubleshoot issues like poor sensor data or unexpected behavior.
Suggestion:

Log sensor values and corrections:
cpp
Copy code
void stabilizeDrone() {
  // Stabilization code...
  Serial.print("Roll: "); Serial.print(roll);
  Serial.print(", Pitch: "); Serial.print(pitch);
  Serial.print(", RollCorrection: "); Serial.print(rollCorrection);
  Serial.print(", PitchCorrection: "); Serial.println(pitchCorrection);
}
8. Ensure Thread Safety with Shared Resources:
If you're planning to extend the code with additional threads or tasks, you should ensure that there are no race conditions or issues with shared resources. For now, this might not be critical, but keep this in mind when scaling.





### suggestion 6 
Suggestions for Improvement
ESC Initialization and Calibration:

Consider initializing all ESC objects in setup() rather than dynamically using ternary operators. This will simplify maintenance.
cpp
Copy code
esc1.attach(escPins[0]);
esc2.attach(escPins[1]);
esc3.attach(escPins[2]);
esc4.attach(escPins[3]);
PID Integral Windup Prevention:

Add clamping to the integral term to prevent excessive windup, which can destabilize control.
cpp
Copy code
rollIntegral = constrain(rollIntegral, -100, 100);  // Adjust limits as necessary
pitchIntegral = constrain(pitchIntegral, -100, 100);
Filter Window Size Validation:

filterWindow should not exceed the size of rollHistory and pitchHistory. Consider dynamically allocating or hardcoding array size to match filterWindow.
Error Handling for Serial Input Parsing:

Add more robust input validation to ensure only numerical throttle commands are processed.
Optimize Throttle Smoothing:

Instead of linear smoothing, use a proportional step based on the difference between current and target throttle for finer control.
cpp
Copy code
int smoothThrottle(int currentThrottle, int targetThrottle) {
  int step = (targetThrottle - currentThrottle) * 0.2;  // Proportional step (adjust as needed)
  return currentThrottle + step;
}
Memory Optimization:

Using String for serial commands may cause memory fragmentation on microcontrollers. Consider using char arrays with strtok() for parsing commands.
Yaw Control:

Currently, the code lacks yaw stabilization. Include yawError and corresponding corrections for a complete control loop.
